{"name":"Validator.js","tagline":"Powerful objects and string validation in javascript","body":"# validator.js\r\n\r\nPowerful object and string validation in Javascript.\r\n\r\n\r\n## Licence\r\n\r\nMIT - See LICENCE.md\r\n\r\n\r\n## Run Tests\r\n\r\n  - `npm install mocha`\r\n  - `npm install expect.js`\r\n  - `mocha tests/server.js`\r\n\r\n# Documentation\r\n\r\n\r\n## General use\r\n\r\n- On node:\r\n\r\n```\r\n$ npm install -g validator.js\r\n```\r\n\r\nThen\r\n\r\n```js\r\nValidator = require( 'validator.js' );\r\n```\r\n\r\n- On browser:\r\n\r\n```js\r\n<script src=\"../validator.js\"></script>\r\n<script>\r\n    console.log(Validator);\r\n</script>\r\n```\r\n\r\n\r\n## Validate Strings\r\n\r\n```js\r\nvar Assert      = Validator.Assert,\r\n    Constraint  = new Validator.Constraint( new Assert().Lenght( 4 ) );\r\n\r\nValidator.Validator().validate( 'foo', Constraint );\r\n```\r\nwill return `[]` if validation passes, `[ Violation ]` in this case.\r\n\r\n\r\n## Validate Objects\r\n\r\n```js\r\nvar Validator = Validator.Validator,\r\n    Assert = Validator.Assert,\r\n    Constraint = Validator.Constraint;\r\n\r\nvar object = {\r\n    name: 'john doe',\r\n    email: 'wrong@email',\r\n    firstname: null,\r\n    phone: null\r\n  },\r\n  Collection = new Validator.Collection({\r\n    name:      new Constraint([\r\n                 new Assert().NotBlank(),\r\n                 new Assert().Length( 4, 25 )\r\n               ]),\r\n    email:     new Constraint( new Assert().Email() ),\r\n    firstname: new Constraint( new Assert().NotBlank() )\r\n  });\r\n\r\nValidator.validate( object, Collection );\r\n```\r\nwill return `{}` if validation passes,\r\n`{ email: [ Violation ], firstname: [ Violation ] }` in this case.\r\n\r\n\r\n## Validation Groups\r\n\r\n```js\r\nvar Validator = Validator.Validator,\r\n    Assert = Validator.Assert,\r\n    Constraint = Validator.Constraint;\r\n\r\nvar object = {\r\n    name: 'john doe',\r\n    email: 'wrong@email',\r\n    firstname: null,\r\n    phone: null\r\n  },\r\n  Collection = new Validator.Collection({\r\n    name:      new Constraint([\r\n                 new Assert().NotBlank(),\r\n                 new Assert().Length( 4, 25 )\r\n               ]),\r\n    email:     new Constraint( new Assert().Email() ),\r\n    firstname: new Constraint( new Assert().NotBlank().addGroup( 'edit' ) ),\r\n    phone:     new Constraint( new Assert().NotBlank().addGroup( 'edit' ) )\r\n  });\r\n\r\nValidator.validate( object, Collection, 'edit' );\r\n```\r\nwill return `{}` in this case `{ firstname: [ Violation ], phone: [ Violation ] }`.","google":"UA-41082541-1","note":"Don't delete this file! It's used internally to help with page regeneration."}