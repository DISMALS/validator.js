{"name":"Validator.js","tagline":"Powerful objects and strings validation in javascript for Node and the browser ","body":"# validator.js\r\n\r\nPowerful objects and strings validation in javascript for Node and the browser\r\n\r\n## Version\r\n\r\n1.1.1\r\n\r\n## Status\r\n\r\n[![Build Status](https://travis-ci.org/guillaumepotier/validator.js.png?branch=master)](https://travis-ci.org/guillaumepotier/validator.js)\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/guillaumepotier/validator.js/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n## License\r\n\r\nMIT - See LICENSE.md\r\n\r\n## Install\r\n\r\n`bower install validator.js`\r\n\r\n# Summary\r\n\r\n  - [General usage](#general-usage)\r\n  - [Validate string](#validate-a-string)\r\n  - [Validate object](#validate-an-object)\r\n  - [Validation groups](#validation-groups)\r\n  - [Bind constraint to an object](#bind-a-constraint-to-an-object)\r\n  - [Assert definition](#assert-definition)\r\n  - [Constraint definition](#constraint-definition)\r\n  - [Available asserts](#available-asserts)\r\n  - [Collection Assert](#collection-assert)\r\n  - [Callback Assert](#callback-assert)\r\n\r\n## General usage\r\n\r\n- On node:\r\n```\r\n$ npm install -g validator.js\r\n```\r\nThen\r\n```js\r\nValidator = require( 'validator.js' );\r\n```\r\n- On browser:\r\n```js\r\n<script src=\"../validator.js\"></script>\r\n<script>\r\n    console.log(Validator);\r\n</script>\r\n```\r\n\r\n## Validate a string\r\n\r\n```js\r\nvar Assert = Validator.Assert;\r\n\r\nValidator.Validator().validate( 'foo', new Assert().Length( { min: 4 } ) );\r\nValidator.Validator().validate( 'foo', [ new Assert().Length( { min: 4 } ), new Assert().Email() ] );\r\n\r\n```\r\nwill return `true` if validation passes, a `Violation`'s array otherwise.\r\n\r\n## Validate an object\r\n\r\n```js\r\nvar Assert = Validator.Assert,\r\n    validator = new Validator.Validator();\r\n\r\nvar object = {\r\n    name: 'john doe',\r\n    email: 'wrong@email',\r\n    firstname: null,\r\n    phone: null\r\n  },\r\n  constraint = {\r\n    name:      [ new Assert().NotBlank(), new Assert().Length( { min: 4, max: 25 } ) ],\r\n    email:     new Assert().Email(),\r\n    firstname: new Assert().NotBlank(),\r\n    phone:     new Assert().NotBlank()\r\n  };\r\n\r\nvalidator.validate( object, constraint );\r\n```\r\nwill return `true` if validation passes,\r\n`{ email: [ Violation ], firstname: [ Violation ] }` in this case.\r\n\r\n## Validation groups\r\n\r\nWith same objects than above, just by adding validation groups:\r\n\r\n```js\r\n  constraint = {\r\n    name:      [ new Assert().NotBlank(), new Assert( 'edit' ).Length( { min: 4, max: 25 } ) ],\r\n    email:     new Assert().Email(),\r\n    firstname: new Assert( [ 'edit', 'register'] ).NotBlank(),\r\n    phone:     new Assert( 'edit' ).NotBlank()\r\n  };\r\n\r\nvalidator.validate( object, constraint, 'edit' );\r\n```\r\nwill return `true` in this case `{ firstname: [ Violation ], phone: [ Violation ] }`.\r\nThere are two special groups: \"Any\" and \"Default\". Validating against `\"Any\"` group will validate\r\nagainst all Asserts, regardless their groups. Validating against `\"Default\"` group will only\r\nvalidate against Asserts that do not have a validation group.\r\n\r\n## Bind a constraint to an object\r\n\r\n```js\r\nValidator.bind( object, constraint );\r\nValidator.validate( object, groups );\r\n```\r\nUnder the hood, by default, a `_validatorjsConstraint` key will be created in object\r\nin order to store here the constraint. You could override this default key name by\r\npassing an option to Validator constructor.\r\n\r\n# Documentation\r\n\r\n## Assert definition\r\n\r\nAn assert implements Assert Interface, and is an assertion that your string or object\r\nproperty must pass during validation process. There are several Asserts built in\r\nValidator.js (see below), but you can implement yours for your needs using the\r\n`Callback()` assert (see below).\r\n\r\n```js\r\nvar length = new Validator.Assert().Length( { min: 10 } );\r\ntry {\r\n  length.check( 'foo' );\r\n} catch ( violation ) {}\r\n```\r\n\r\n## Constraint definition\r\n\r\nA Constraint is a set of asserts nodes that would be used to validate an object.\r\n\r\n```js\r\nvar length = new Validator.Assert().Length( { min: 10 } );\r\nvar notBlank = new Validator.Assert().NotBlank();\r\nvar constraint = new Constraint( { foo: length, bar: notBlank } );\r\n\r\nconstraint.check( { foo: 'foo', bar: 'bar' } );\r\n```\r\n\r\n### Strict Constraint validation\r\n\r\nBy default, Validator.js checks properties that are defined in the Constraint object\r\nand exists on the validated object unless the constraint is `Required`. If you want a\r\nstrict validation (ie ensure that **every**) Constraint node is valid, you'll have to pass\r\nan optional parameter to your Constraint:\r\n\r\n```js\r\nvar object = {\r\n    foo: 'foo',\r\n    bar: 'bar'\r\n};\r\n\r\nvar constraint = new Constraint( {\r\n    foo: new Assert().NotBlank(),\r\n    bar: new Assert().NotBlank(),\r\n    baz: new Assert().NotBlank()\r\n}, { strict: true });\r\n\r\nconstraint.check( object );\r\n```\r\nwill return a `HaveProperty` Violation, saying that `baz` property does not exist\r\nin validated object. Without `{ strict: true }` this check would return `true`.\r\n\r\n## Available asserts\r\n\r\n```js\r\nnew Assert().Blank();\r\nnew Assert().Callback( fn ( value ) {} [, arg1 ...] );\r\nnew Assert().Choice( [] );\r\nnew Assert().Choice( fn () {} );\r\nnew Assert().Collection ( Assert );\r\nnew Assert().Collection ( Constraint );\r\nnew Assert().Count( value );\r\nnew Assert().Count( fn ( [] ) {} );\r\nnew Assert().Email();\r\nnew Assert().EqualTo( value );\r\nnew Assert().EqualTo( fn ( value ) {} );\r\nnew Assert().GreaterThan( threshold );\r\nnew Assert().GreaterThanOrEqual( threshold );\r\nnew Assert().InstanceOf( classRef );\r\nnew Assert().IsString();\r\nnew Assert().Length( { min: value, max: value } );\r\nnew Assert().HaveProperty( propertyName );\r\nnew Assert().LessThan( threshold );\r\nnew Assert().LessThanOrEqual( threshold );\r\nnew Assert().EqualTo( value );\r\nnew Assert().EqualTo( fn ( value ) {} );\r\nnew Assert().NotBlank();\r\nnew Assert().NotNull();\r\nnew Assert().Null();\r\nnew Assert().Range( min, max );\r\nnew Assert().Regexp( value );\r\nnew Assert().Required();\r\nnew Assert().Unique();\r\nnew Assert().Unique( { key: value } );\r\n\r\n// in extras.js\r\nnew Assert().Eql( object );\r\nnew Assert().Eql( fn ( value ) {} );\r\nnew Assert().IPv4();\r\nnew Assert().Mac();\r\n```\r\n\r\n### Collection Assert\r\n\r\nCollection Assert is quite special yet powerful. It allows you to validate\r\nan object's array by checking each one of them against a constraint.\r\n\r\nHere is an example of test suite test showing how this assert works:\r\n\r\n```js\r\nit( 'Collection', function () {\r\n  var itemConstraint = new Constraint( { foobar: new Assert().NotNull(), foobaz: new Assert().NotNull() } ),\r\n    object = {\r\n      foo: null,\r\n      items: [\r\n        { foobar: null, foobaz: 'foo', fooqux: null },\r\n        { foobar: 'bar', foobaz: 'baz' },\r\n        { foobar: null, foobaz: null }\r\n      ]\r\n    },\r\n    constraint = {\r\n      foo: new Assert().NotNull(),\r\n      items: [ new Assert().Collection( itemConstraint ), new Assert().Count( 2 ) ]\r\n    };\r\n\r\n  var result = validator.validate( object, constraint );\r\n  expect( result ).to.have.key( 'foo' );\r\n  expect( result ).to.have.key( 'items' );\r\n  expect( result.items[ 0 ] ).to.have.key( '0' );\r\n  expect( result.items[ 0 ] ).to.have.key( '2' );\r\n  expect( result.items[ 0 ][ 0 ] ).to.have.key( 'foobar' );\r\n  expect( result.items[ 0 ][ 0 ] ).not.to.have.key( 'foobaz' );\r\n  expect( result.items[ 0 ][ 2 ] ).to.have.key( 'foobar' );\r\n  expect( result.items[ 0 ][ 2 ] ).to.have.key( 'foobaz' );\r\n  expect( result.items[ 1 ] ).to.be.a( Violation );\r\n  expect( result.items[ 1 ].assert ).to.be( 'Count' );\r\n} )\r\n```\r\n\r\n### Callback Assert\r\n\r\nThis assert allows you to add the custom rules / assert you want. Just give a\r\ncallback function that will be called with the value to be tested against.\r\nReturn true for validation success, everything else if there is an error.\r\n\r\nHere is an example from test suite test showing how this assert works:\r\n\r\n```js\r\nit( 'Callback', function () {\r\n  assert = new Assert().Callback( function ( value ) {\r\n    var calc = ( 42 / value ) % 2;\r\n\r\n    return calc ? true : calc;\r\n  } );\r\n\r\n  expect( validate( 3, assert ) ).not.to.be( true );\r\n  expect( validate( 3, assert ).show() ).to.eql( { assert: 'Callback', value: 3, violation: { result: 0 } } );\r\n  expect( validate( 42, assert ) ).to.be( true );\r\n\r\n  // improved Callback\r\n  assert = new Assert().Callback( function ( value, string1, string2 ) {\r\n    return value + string1 + string2 === 'foobarbaz';\r\n  }, 'bar', 'baz' );\r\n  expect( validate( 'foo', assert ) ).to.be( true );\r\n  expect( validate( 'bar', assert ) ).to.be( false );\r\n} )\r\n```\r\n\r\n### A note on type checking\r\nNote that `Length` assertion works for both String and Array type, so if you want to validate only strings, you should write an additional assertion:\r\n```js\r\nvar Assert = Validator.Assert;\r\n\r\nValidator.Validator().validate( 'foo', [\r\n  new Assert().Length( { min: 4, max: 100 } ),\r\n  new Assert().IsString()\r\n] );\r\n```\r\n\r\n## Run Tests\r\n\r\n- On node:\r\n  - `npm install mocha`\r\n  - `npm install expect.js`\r\n  - `mocha tests/server.js`\r\n\r\n- On browser:\r\n  - open tests/browser.html in your browser\r\n","google":"UA-41082541-1","note":"Don't delete this file! It's used internally to help with page regeneration."}