{"name":"Validator.js","tagline":"Powerful objects and string validation in javascript","body":"# validator.js\r\n\r\nPowerful object and string validation in Javascript.\r\n\r\n## Version\r\n\r\n0.2.1\r\n\r\n## Status\r\n\r\n[![Build Status](https://travis-ci.org/guillaumepotier/validator.js.png?branch=master)](https://travis-ci.org/guillaumepotier/validator.js)\r\n\r\n## Licence\r\n\r\nMIT - See LICENCE.md\r\n\r\n\r\n## Run Tests\r\n\r\n  - `npm install mocha`\r\n  - `npm install expect.js`\r\n  - `mocha tests/server.js`\r\n\r\n# Documentation\r\n\r\n\r\n## General usage\r\n\r\n- On node:\r\n\r\n```\r\n$ npm install -g validator.js\r\n```\r\n\r\nThen\r\n\r\n```js\r\nValidator = require( 'validator.js' );\r\n```\r\n\r\n- On browser:\r\n\r\n```js\r\n<script src=\"../validator.js\"></script>\r\n<script>\r\n    console.log(Validator);\r\n</script>\r\n```\r\n\r\n\r\n# Validate Strings\r\n\r\n```js\r\nvar Assert = Validator.Assert;\r\n\r\nValidator.Validator().validate( 'foo', new Assert().Length( { min: 4 } ) );\r\nValidator.Validator().validate( 'foo', [ new Assert().Length( { min: 4 } ), new Assert().Email() ] );\r\n\r\n```\r\nwill return `[]` if validation passes, a `Violation` array otherwise.\r\n\r\n\r\n# Validate Objects\r\n\r\n```js\r\nvar Validator = Validator.Validator,\r\n    Assert = Validator.Assert,\r\n    Constraint = Validator.Constraint;\r\n\r\nvar object = {\r\n    name: 'john doe',\r\n    email: 'wrong@email',\r\n    firstname: null,\r\n    phone: null\r\n  },\r\n  constraint = {\r\n    name:      [ new Assert().NotBlank(), new Assert().Length( { min: 4, max: 25 } ) ],\r\n    email:     new Assert().Email(),\r\n    firstname: new Assert().NotBlank(),\r\n    phone:     new Assert().NotBlank()\r\n  };\r\n\r\nValidator.validate( object, constraint );\r\n```\r\nwill return `{}` if validation passes,\r\n`{ email: [ Violation ], firstname: [ Violation ] }` in this case.\r\n\r\n\r\n# Validation Groups\r\n\r\nWith same objects than above, just by adding validation groups:\r\n\r\n```js\r\n  collection = {\r\n    name:      [ new Assert().NotBlank(), new Assert().Length( { min: 4, max: 25 } ) ],\r\n    email:     new Assert().Email(),\r\n    firstname: new Assert().NotBlank().addGroups( [ 'edit', 'register'] ),\r\n    phone:     new Assert().NotBlank().addGroup( 'edit' )\r\n  };\r\n\r\nValidator.validate( object, collection, 'edit' );\r\n```\r\nwill return `{}` in this case `{ firstname: [ Violation ], phone: [ Violation ] }`.\r\n\r\n\r\n# Documentation\r\n\r\n# Assert\r\n\r\nAn assert implements Assert Interface, and is an assertion that your string or object\r\nproperty must pass during validation process. There are several Asserts built in\r\nValidator.js (see below), but you can implement yourself for your needs as well.\r\n\r\n```js\r\nvar length = new Validator.Assert().Length( { min: 10 } );\r\ntry {\r\n  length.check( 'foo' );\r\n} catch ( violation ) {}\r\n```\r\n\r\n# Constraint\r\n\r\nA Constraint is a set of asserts nodes that would be used to validate an object.\r\n\r\n```js\r\nvar length = new Validator.Assert().Length( { min: 10 } );\r\nvar notBlank = new Validator.Assert().NotBlank();\r\nvar constraint = new Constraint( { foo: length, bar: notBlank } );\r\n\r\nconstraint.check( { foo: 'foo', bar: 'bar' } );\r\n```","google":"UA-41082541-1","note":"Don't delete this file! It's used internally to help with page regeneration."}